# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o4WTkjUOYNawraP9f0M_PV1yo_KgpGB4
"""

#  Import necessary libraries
import os  # For file handling
import PyPDF2  # For extracting text from PDFs
import logging  # For error logging
import requests  # For making API requests
from dotenv import load_dotenv  # For loading environment variables
import re  # For text preprocessing

# Load environment variables from a .env file (Make sure to create one with your API key)
load_dotenv()
AZURE_APIM_KEY = os.getenv("AZURE_APIM_KEY")  # Enter your own API key in the .env file
AZURE_API_URL = os.getenv("AZURE_API_URL")  # Enter your own Azure API URL in the .env file

# Configure logging to track errors
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

#  NOTE: If you don't have a .env file, manually set the keys below
# AZURE_APIM_KEY = "your_api_key_here"
# AZURE_API_URL = "your_api_url_here"

#  Function to extract text from a PDF
def extract_text_from_pdf(pdf_path):
    """Reads a PDF file and extracts text from all pages."""
    try:
        text = ""
        with open(pdf_path, "rb") as file:
            reader = PyPDF2.PdfReader(file)  # Load the PDF
            for page in reader.pages:  # Iterate through each page
                text += page.extract_text() + "\n"  # Append extracted text
        return text
    except Exception as e:
        logging.error(f"Error extracting text from PDF: {e}")  # Log error
        return None

#  Function to clean and normalize text
def preprocess_text(text):
    """Removes extra spaces and unwanted characters for better analysis."""
    try:
        text = re.sub(r'\s+', ' ', text)  # Replace multiple spaces with a single space
        text = re.sub(r'[^\w\s.%]', '', text)  # Remove special characters (except dots & %)
        return text.lower()  # Convert to lowercase for uniformity
    except Exception as e:
        logging.error(f"Error preprocessing text: {e}")  # Log error
        return ""

#  Function to summarize text using Azure OpenAI
def summarize_text(text):
    """Uses Azure OpenAI API to extract investment insights from text."""
    try:
        headers = {
            "Content-Type": "application/json",
            "Ocp-Apim-Subscription-Key": AZURE_APIM_KEY  # API key for authentication
        }
        payload = {
            "messages": [
                {"role": "system", "content": "You are an AI that extracts concise investment insights from earnings call transcripts."},
                {"role": "user", "content": """
                    Provide a brief yet comprehensive summary covering:
                    - Future growth prospects
                    - Key business strategy changes
                    - Major triggers impacting stock performance
                    - Critical factors affecting next year's earnings and growth.
                    Ensure the summary is optimized for clarity and efficiency without losing vital details.
                """},
                {"role": "user", "content": text}  # The extracted and preprocessed text
            ],
            "temperature": 0,  # Keeps the response deterministic
            "top_p": 0.01,
            "max_tokens": 1024  # Limit token usage
        }

        response = requests.post(AZURE_API_URL, headers=headers, json=payload)  # Send request to API
        response.raise_for_status()  # Raise an error if request fails

        result = response.json()
        return result['choices'][0]['message']['content'] if 'choices' in result else None
    except requests.exceptions.RequestException as e:
        logging.error(f"API Request failed: {e}")  # Log error if API call fails
        return None

#  Main function to execute the entire process
def main():
    pdf_path = input("Enter the path to the PDF file: ")  # Ask user for file path
    if not os.path.exists(pdf_path):  # Check if file exists
        print("‚ùå File not found. Please check the path and try again.")
        return

    print("\nüìÑ Extracting text from PDF...")
    text = extract_text_from_pdf(pdf_path)

    if text:
        print("\n‚ú® Preprocessing text...")
        processed_text = preprocess_text(text)

        print("\nü§ñ Sending text for summarization...")
        summary = summarize_text(processed_text)

        if summary:
            print("\n‚úÖ Key Investment Insights:\n")
            print(summary)

            # Save the summary to a text file
            with open("summary.txt", "w", encoding="utf-8") as file:
                file.write(summary)

            print("\nüìÅ Summary saved to 'summary.txt' ‚úÖ")
        else:
            print("‚ö†Ô∏è Failed to generate summary.")
    else:
        print("‚ö†Ô∏è Failed to extract text from PDF.")

#  Run the script
if __name__ == "__main__":
    main()

"""Investor Insights Extraction from PDF

Steps in the Code
Load Environment Variables: Retrieves API keys from a .env file.
Extract Text from PDF: Uses PyPDF2 to read and extract text.
Preprocess Text: Cleans text by removing extra whitespace and unwanted characters.
Summarize Using Azure OpenAI: Sends the text to Azure OpenAI for key investment insights.
Save the Summary: The final summary is saved in summary.txt.
This script ensures that investors get a concise and insightful summary of earnings call transcripts.
"""